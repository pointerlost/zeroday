#version 460
layout(local_size_x = 64) in;

#include "constant.glsl"

// metadata table (per entity)
layout(std430, binding = BINDING_ENTITY_METADATA) buffer EntityMetadata {
    uint entityVAO[];
    uint entityMaterialId[];
    uint entityTransformId[];
    uint entityIndexCount[];
    uint entityIndexOffset[];
};

// visible entity list
layout(std430, binding = BINDING_VISIBLE_ENTITIES) buffer VisibleEntities {
    uint visibleEntityIndices[];
};

// output: Indirect draw commands
layout(std430, binding = BINDING_COMMANDS) buffer IndirectCommands {
    DrawElementsIndirectCommand commands[];
};

// output: Payloads (per draw -> gl_BaseInstance lookup)
layout(std430, binding = BINDING_PAYLOADS) buffer DrawPayloads {
    DrawPayloadGPU payloads[];
};

// batch counters (VAO+Material comp)
layout(std430, binding = BINDING_BATCH_COUNTERS) buffer BatchCounters {
    atomic_uint batchCounts[];
};

void main() {
    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= visibleEntityCount) return;

    uint entityIndex = visibleEntityIndices[threadIndex];

    // batch key (VAO + material)
    uint batchKey = entityVAO[entityIndex] * 256u + entityMaterialId[entityIndex];

    // reserve slot with atomic counter
    uint commandIndex = atomicAdd(batchCounts[batchKey], 1u);

    // output index (batch * maxPerBatch + slot)
    uint outputIndex = batchKey * MAX_PER_BATCH + commandIndex;

    // fill command
    commands[outputIndex].count         = entityIndexCount[entityIndex];
    commands[outputIndex].instanceCount = 1;
    commands[outputIndex].firstIndex    = entityIndexOffset[entityIndex];
    commands[outputIndex].baseVertex    = 0;
    commands[outputIndex].baseInstance  = outputIndex; // payload index!

    // fill payload
    payloads[outputIndex].transformIndex = int(entityTransformId[entityIndex]);
    payloads[outputIndex].materialIndex  = int(entityMaterialId[entityIndex]);
    payloads[outputIndex].meshID         = int(entityVAO[entityIndex]); // optional
    payloads[outputIndex].pad            = 0;
}

#ifndef CAMERA_DATA_GLSL
#define CAMERA_DATA_GLSL

#include "common/constants.glsl"

layout(std430, binding = BINDING_PHASE_INPUT) uniform CameraUBO {
    mat4 view;
    mat4 projection;
    vec3 position;
    float pad_1;
    vec3 direction;
    float pad_2;
} uCamera;

mat4 GetViewMatrix()       { return uCamera.view; }
mat4 GetProjectionMatrix() { return uCamera.projection; }
vec3 GetCameraPosition()   { return uCamera.position; }
vec3 GetCameraDirection()  { return uCamera.direction; }

// helper for transformations
vec4 ApplyViewProjection(vec3 worldPosition) {
    return uCamera.projection * uCamera.view * vec4(worldPosition, 1.0);
}

#endif
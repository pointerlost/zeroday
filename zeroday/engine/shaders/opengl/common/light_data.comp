#version 460
layout(local_size_x = 64) in;

#include "common/constant.glsl"
#include "common/dirty_tracker.glsl"

struct LightData {
    int   type; // 0 = directional, 1 = point, 2 = spot
    float constant;
    float linear;
    float quadratic;
    vec3  position;
    float cutOff;
    vec3  direction;
    float outerCutOff;
    vec3  radiance; // color * intensity
    float intensity;
};

layout(std430, binding = BINDING_PHASE_INPUT) buffer GPULight {
    LightData gpuLightData[];
};

layout(std430, binding = BINDING_PHASE_OUTPUT) buffer CPULight {
    LightData cpuLightData[];
};

void main() {
    uint dirtyListIndex = gl_GlobalInvocationID.x;
    if (dirtyListIndex >= dirtyEntityCount) return;

    // dirty info
    DirtyEntityState dirtyEntity = dirtyEntities[dirtyListIndex];
    uint lightIdx = dirtyEntity.entityId;

    // light dirty check
    if ((dirtyEntity.componentFlags & COMPONENT_FLAG_LIGHT_DIRTY) != 0) {
        gpuLightData[lightIdx] = cpuLightData[lightIdx];
    }
}
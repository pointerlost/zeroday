#version 460
layout(local_size_x = 64) in;

#include "constant.glsl"
#include "common/dirty_tracker.glsl"

struct MaterialData {
    vec4 baseColor;   // rgb = albedo, a = unused (or alpha)
    vec3 emissive;
    float _p1;
    float metallic;
    float roughness;
    float _p2;
    float _p3;
};

layout(std430, binding = BINDING_PHASE_INPUT) buffer GPUMaterial {
    MaterialData gpuMaterialData[];
};

layout(std430, binding = BINDING_PHASE_OUTPUT) buffer CPUMaterial {
    MaterialData cpuMaterialData[];
};

void main() {
    uint dirtyListIndex = gl_GlobalInvocationID.x;
    if (dirtyListIndex >= dirtyEntityCount) return;

    // dirty info
    DirtyEntityState dirtyEntity = dirtyEntities[dirtyListIndex];
    uint materialIdx = dirtyEntity.entityId;

    // material dirty check
    if ((dirtyEntity.componentFlags & COMPONENT_FLAG_MATERIAL_DIRTY) != 0) {
        gpuMaterialData[materialIdx] = cpuMaterialData[materialIdx];
    }
}
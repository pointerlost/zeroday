#ifndef PBR_CALC_COMPUTE
#define PBR_CALC_COMPUTE

// -------------------
// PBR calculation (uses material fields directly)
// -------------------
vec3 CalcPBR(MaterialData m, vec3 N, vec3 V, vec3 L, vec3 lightColor) {
    vec3 albedo = m.baseColor.rgb;
    float rough = m.roughness;
    float metal = m.metallic;

    vec3 F0 = mix(vec3(0.04), albedo, metal);
    vec3 H = normalize(V + L);

    float NdotL = max(dot(N, L), 0.0);
    float NdotV = max(dot(N, V), 0.0);
    float NdotH = max(dot(N, H), 0.0);
    float VdotH = max(dot(V, H), 0.0);

    float alpha = rough * rough;
    float D = alpha / (PI * pow(NdotH * NdotH * (alpha - 1.0) + 1.0, 2.0) + 1e-5);
    float G = min(1.0, min(2.0 * NdotH * NdotV / max(VdotH, 1e-5), 2.0 * NdotH * NdotL / max(VdotH, 1e-5)));
    vec3 F = F0 + (1.0 - F0) * pow(1.0 - VdotH, 5.0);

    vec3 specular = (D * G * F) / (4.0 * max(NdotL * NdotV, 1e-5) + 1e-5);
    vec3 kD = (1.0 - F) * (1.0 - metal);

    vec3 Lo = (kD * albedo / PI + specular) * lightColor * NdotL;
    return Lo;
}

#endif
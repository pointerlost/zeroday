#version 460
layout(local_size_x = 64) in;

#include "constant.glsl"
#include "common/dirty_tracker.glsl"

struct TransformData {
    mat4 transform;
    mat4 normalMat;
};

// This buffer using for calculations on the GPU side
layout(std430, binding = BINDING_PHASE_INPUT) buffer GPUTransform {
    TransformData gpuTransformData[];
};

// This buffer coming from CPU for updating GPU-side buffer (dirty object updating)
layout(std430, binding = BINDING_PHASE_OUTPUT) buffer WorldTransforms {
    mat4 worldTransforms[];
};

void main() {
    uint dirtyListIndex = gl_GlobalInvocationID.x;
    if (dirtyListIndex >= dirtyEntityCount) return;

    DirtyEntityState dirtyEntity = dirtyEntities[dirtyListIndex];
    uint transformIdx = dirtyEntity.entityId;

    if ((dirtyEntity.componentFlags & COMPONENT_FLAG_TRANSFORM_DIRTY) != 0) {
        mat4 world = worldTransforms[transformIdx];
        mat3 normalMat3 = mat3(transpose(inverse(mat3(world))));

        transforms[transformIdx].world     = world;
        transforms[transformIdx].normalMat = mat4(normalMat3);
    }
}